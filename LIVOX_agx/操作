操作方法
LIO-SAM操作方法
cd ~/LIO-SAM/catkin_ws
source devel/setup.bash
启动rs16驱动程序在RS_SDK文件夹下面
source build/devel/setup.bash
roslaunch rslidar_sdk start.launch
对于robosense而言，首先要启动数据的转化，转化为velodyne数据格式启动程序
rosrun rs_to_velodyne rs_to_velodyne XYZIRT XYZIRT

roslaunch lio_sam run.launch

IMU操作方法
给权限
sudo chmod 777 /dev/ttyUSB0
启动驱动程序
roslaunch pa_gs02 pa_gs02_driver.launch  //IMU的驱动程序

联合标定：
文件放在lidarimu下面的lidar_align的程序，首先
source build/devel/setup.bash
启动
roslaunch lidar_align lidar_align.launch




################################LIVOX激光雷达操作步骤############################


## 前置依赖
* Ubuntu 14.04/Ubuntu 16.04/Ubuntu 18.04, x86 和 ARM (Nvidia TX2)


### 4.1.1 Ubuntu 18.04/16.04/14.04 LTS
#### 依赖
Livox SDK 依赖于 cmake 。你可以通过 apt 工具安装这些依赖包 :
```
sudo apt install cmake
```
#### 编译 Livox SDK

在 Livox SDK 目录中，执行以下指令编译工程:
```
git clone https://github.com/Livox-SDK/Livox-SDK.git
cd Livox-SDK
cd build && cmake ..
make
sudo make install
```

### 4.1.3 ARM-Linux 交叉编译

以下将介绍 ARM-Linux 的交叉编译过程。

#### 依赖

交叉编译需要在主机安装 cmake。 你可以通过 apt 工具安装这些依赖包 :

```
sudo apt install cmake
```

#### 交叉编译工具链

如果你的 ARM 板厂商提供了交叉编译工具链，则可以跳过以下交叉编译工具链的安装步骤，采用厂商提供的交叉编译工具链。

以下的指令分别对应 32bit 和 64bit ARM 板的 C 和 C++ 的交叉编译工具链的安装。你需要根据你 ARM 板的类型正确地安装交叉编译工具链，如果你的 ARM 板是 64bit SoC 架构，只需要安装 64bit 交叉编译工具链，如果你的 ARM板是 32bit SoC 架构，只需要安装 32bit 的交叉编译工具链。

安装 **ARM 32 bits 交叉编译工具链**：

```
 sudo apt-get install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi
```

安装 **ARM 64 bits 交叉编译工具链**：

```
sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
```

#### 交叉编译 Livox-SDK

以 **ARM 32 bits 交叉编译工具链**为例，在 Livox SDK 目录中，执行以下指令交叉编译工程：

```
cd Livox-SDK
cd build && \
cmake .. -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_C_COMPILER=arm-linux-gnueabi-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabi-g++
make
```

以 **ARM 64 bits 交叉编译工具链**为例，在 Livox SDK 目录中，执行以下指令交叉编译工程：

```
cd Livox-SDK
cd build && \
cmake .. -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++
make
```

**注意:**

-  gcc交叉编译器的版本需要支持 C ++11 标准

## 4.2 运行 Livox SDK 样例

Livox SDK 中提供了两种类型的示例 : Sample/Lidar 和 Sample/Hub, 分别展示了 Livox SDK 直接连接 Livox LiDAR 和通过 Livox Hub 连接的情况下，如何配置 Livox 雷达和接收点云数据。Sample 运行的时序如下图所示 ：

![](doc/images/sample.png)

### 4.2.1 Ubuntu 18.04/16.04 /14.04 LTS
对于 Ubuntu 18.04/16.04/14.04 LTS 系统，如果直接连接 Livox LiDAR，则运行 *lidar_sample* ：
```
cd sample/lidar && ./lidar_sample
```
或者如果通过 Livox Hub 连接雷达，则运行 *hub_sample* :
```
cd sample/hub && ./hub_sample
```

#### 4.3.1 程序选项

我们提供了以下程序选项去连接指定的设备和生成日志文件 :
```
[-c]:Register LiDAR units by Broadcast Code. Connect the registered units ONLY. 
[-l]:Save the log file(In the executable file's directory).
[-h]:Show help.
```
这里是示例 :
```
./lidar_sample_cc -c "00000000000002&00000000000003&00000000000004" -l
./hub_sample_cc -c "00000000000001" -l
```

#### 4.3.2 编辑广播码

注释以下的代码块：

```
/** Connect all the broadcast device. */
int lidar_count = 0;
char broadcast_code_list[kMaxLidarCount][kBroadcastCodeSize];
```

在编译前移除以下代码块的注释，并且替换 broadcast code lists 为你指定的LiDAR 的广播码，对于 LiDAR sample ({Livox-SDK}/sample/lidar/main.c) 和 Hub sample ({Livox-SDK}/sample/hub/main.c)，设置 BROADCAST_CODE_LIST_SIZE 并且替换 在`main.c`  的 broadcast code lists。

```
/** Connect the broadcast device in list, please input the broadcast code and modify the BROADCAST_CODE_LIST_SIZE. */
/*#define BROADCAST_CODE_LIST_SIZE  3
int lidar_count = BROADCAST_CODE_LIST_SIZE;
char broadcast_code_list[kMaxLidarCount][kBroadcastCodeSize] = {
  "000000000000002",
  "000000000000003",
  "000000000000004"
};*/
```

### 4.4 生成 lvx 文件

我们为 Hub 连接和 LiDAR 直连的方式都提供了 C++ 生成 lvx 文件示例. 你可以通过 `4.2.1` and `4.2.2` 中描述的相同方式去运行它们。

#### 4.4.1 程序选项

你可以使用  `4.3.1`  提到的程序选项去连接指定的设备和生成日志文件, 我们为 lvx 文件提供了两个新的选项:
```
[-t] Time to save point cloud to the lvx file.(unit: s)
[-p] Get the extrinsic parameter from standard extrinsic.xml file(The same as viewer) in the executable file's directory.(Especially for LiDAR unit(s) as the hub will calculate the extrinsic parameter by itself)
```
这里是示例 :
```
./lidar_lvx_sample -c "00000000000002&00000000000003&00000000000004" -l -t 10 -p
./hub_lvx_sample -c "00000000000001" -l -t 10
```

livox_loam建立地图
连上mid-70，改ip为192.168.1.101，先启动livox-loam代码：
在文件夹~/LIVOX/LOAM_Livox/catkin_ws
   source devel/setup.bash
    roslaunch loam_livox livox.launch;
再启动驱动程序，在路径~/LIVOX/livox_ros_driver/catkin_ws
在启动前改正avia.yaml中的话题包括IMU和激光雷达的话题名称，并且将改正为time_sync_en: true
     source devel/setup.bash
     roslaunch livox_ros_driver livox_lidar.launch，注意是livox_lidar.launch，而不是livox_lidar_rviz.launch



Fast_LIO2建图：需要IMU数据和激光雷达数据，编译时，请将KID——tree的代码放到include下面，run方法如下：
在文件夹~/LIVOX/FAST_LIO/catkin_ws下面：
    source devel/setup.bash
    roslaunch fast_lio mapping_avia.launch
    roslaunch livox_ros_driver livox_lidar_msg.launch




